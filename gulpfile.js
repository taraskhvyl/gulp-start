/** * Gulp Packages */// Generalvar gulp            = require('gulp');var del             = require('del');var plumber         = require('gulp-plumber');var header          = require('gulp-header');var watch           = require('gulp-watch');var browserSync     = require('browser-sync');var package         = require('./package.json');var concat          = require('gulp-concat');// Scripts and testsvar jshint          = require('gulp-jshint');var stylish         = require('jshint-stylish');var concat          = require('gulp-concat');var uglify          = require('gulp-uglify');// Stylesvar sass            = require('gulp-sass');var sourcemaps      = require('gulp-sourcemaps');var postcss         = require('gulp-postcss');var autoprefixer    = require('autoprefixer');var cleanCSS        = require('gulp-clean-css');// imagesvar imagemin        = require('gulp-imagemin');// SVGsvar svgmin          = require('gulp-svgmin');var svgSprite       = require('gulp-svg-sprite');var iconfont        = require('gulp-iconfont');var iconfontCss     = require('gulp-iconfont-css');//HTMLvar jade             = require('gulp-jade');/** * Paths to project folders */var paths = {    input: 'src/**/*',    output: 'dist/',    jade: {        input: 'src/jade/*.jade',        all: 'src/jade/**/*.jade',        output: 'src/'    },    scripts: {        input: 'src/js/',        vendors: 'src/js/vendors/*.js',        lint: 'src/js/*.js',        output: 'dist/js/'    },    styles: {        input: 'src/scss/**/*.scss',        index: 'src/scss/main.scss',        mid: 'src/css/',        allcss: 'src/css/*css',        output: 'dist/css/',        vendors: 'src/css/vendors/*.css'    },    svgs: {        input: 'src/svg/',        mid: '../img/',        output: 'dist/svg/',        all: 'src/svg/*.svg'    },    images: {        input: 'src/img/**/*.*',        output: 'dist/img/'    },    fonts: {        input: 'src/fonts/*',        output: 'dist/fonts/'    },    static: {        input: 'src/*.html',        output: 'dist/'    }};/** * Template for banner to add to file headers */var banner = {    full :        '<!--!\n' +        ' * <%= package.name %> : <%= package.description %>\n' +        ' * (c) ' + new Date().getFullYear() + '\n' +        ' * Developer: <%= package.author.name %>\n' +        ' * Dev. website : <%= package.author.url %>\n' +        ' * MIT License\n' +        ' -->\n\n',    cssJS :        '/*\n' +        ' * <%= package.name %> : <%= package.description %>\n' +        ' * (c) ' + new Date().getFullYear() + '\n' +        ' * Developer: <%= package.author.name %>\n' +        ' * Dev. website : <%= package.author.url %>\n' +        ' * MIT License\n' +        '*/\n\n'};/** * Gulp Taks */// Lint, minify, and concatenate scriptsgulp.task('build:scripts', function() {    return gulp.src(paths.scripts.input)        .pipe(gulp.dest(paths.scripts.output));});gulp.task('vendorjs', function () {    return gulp.src(paths.scripts.vendors)        .pipe(uglify())        .pipe(concat('vendors.min.js'))        .pipe(gulp.dest(paths.scripts.input));});// Compile jade to htmlgulp.task('jade', function() {    gulp.src(paths.jade.input)        .pipe(plumber())        .pipe(jade({            pretty: true,            cache: false        }))        .pipe(header(banner.full, { package : package }))        .pipe(gulp.dest(paths.jade.output));});// Process, lint, and minify Sass filesgulp.task('scss', function() {    return gulp.src(paths.styles.index)        .pipe(plumber())        .pipe(sourcemaps.init())        .pipe(sass({            outputStyle: 'expanded',            sourceComments: true        }))        .pipe(postcss([ autoprefixer({'browsers': '>0%'}) ]))        .pipe(gulp.dest(paths.styles.mid))});gulp.task('vendorcss', function () {    return gulp.src(paths.styles.vendors)        .pipe(concat('vendors.css'))        .pipe(gulp.dest(paths.styles.mid));});gulp.task('build:styles', function() {    return gulp.src(['src/css/vendors.css', 'src/css/main.css', 'src/css/sprite.css'])        .pipe(concat('all.min.css'))        .pipe(cleanCSS({compatibility: 'ie8'}))        .pipe(header(banner.cssJS, { package : package }))        .pipe(gulp.dest(paths.styles.output))        .pipe(browserSync.reload({stream:true}));});// спрайты SVG// font svggulp.task('iconfont', function(){    gulp.src(paths.svgs.all)        .pipe(svgmin({            plugins: [{                removeDoctype: true            }, {                removeComments: true            }, {                cleanupNumericValues: {                    floatPrecision: 2                }            }, {                convertColors: {                    names2hex: false,                    rgb2hex: false                }            }, {                removeXMLNS: true            }, {                cleanupIDs: true            }, {                removeTitle: true            }]        }))        .pipe(iconfontCss({            path: 'src/scss/components/icon-fonts.scss',            fontName: 'svg-icons',            targetPath: '../scss/components/_icons.scss',            fontPath: '../fonts/'        }))        .pipe(iconfont({            fontName: 'svg-icons', // required            prependUnicode: true, // recommended option            formats: ['ttf', 'eot', 'woff'], // default, 'woff2' and 'svg' are available            normalize:true        }))        .pipe(gulp.dest('src/fonts/'));});// Copy image files into output foldergulp.task('build:images', function() {    return gulp.src(paths.images.input)        .pipe(plumber())        .pipe(imagemin())        .pipe(gulp.dest(paths.images.output));});gulp.task('build:fonts', function() {    return gulp.src(paths.fonts.input)        .pipe(plumber())        .pipe(gulp.dest(paths.fonts.output));});// Copy static files into output foldergulp.task('build:static', function() {    return gulp.src(paths.static.input)        .pipe(plumber())        .pipe(gulp.dest(paths.static.output));});gulp.task('scripts:dev', function() {    return gulp.src(paths.scripts.lint)        .pipe(plumber())        .pipe(gulp.dest(paths.scripts.output));});// Lint scriptsgulp.task('lint:scripts', function () {    return gulp.src(paths.scripts.lint)        .pipe(plumber())        .pipe(jshint())        .pipe(jshint.reporter('jshint-stylish'));});// Remove pre-existing content from output and test foldersgulp.task('clean:dist', function () {    del.sync([        paths.output    ]);});// Spin up livereload server and listen for file changesgulp.task("browser-sync", function() {    browserSync({        port: 80,        ghostMode: false,        server: {            baseDir: paths.jade.output        }    });});gulp.task("bs-reload", function () {    browserSync.reload();});/** * Task Runners */// watchergulp.task('watch', function () {    gulp.watch(paths.jade.all, ['jade', 'bs-reload']);    gulp.watch(paths.styles.input, ['scss', 'bs-reload']);    gulp.watch(paths.images.input, ['bs-reload']);    gulp.watch(paths.svgs.all, ['iconfont', 'bs-reload']);    gulp.watch(paths.scripts.vendors, ['vendorjs', 'bs-reload']);    gulp.watch(paths.styles.vendors, ['vendorcss', 'bs-reload']);});gulp.task('mid', [    'jade',    'scss',    'iconfont',    'vendorjs',    'vendorcss']);// Compile files and generate docs when something changesgulp.task('default', [    'mid',    'watch',    'browser-sync']);// Compile filesgulp.task('compile', [    'clean:dist',    'scripts:dev',    'build:styles',    'build:images',    'build:static',    'build:fonts']);