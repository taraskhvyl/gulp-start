// @font-face mixin
// Order of the includes matters, and it is: normal, bold, italic, bold+italic.
// Forked from Bourbon. https://github.com/thoughtbot/bourbon/
@mixin font-face($font-family, $file-path, $weight: normal, $style: normal) {
    @font-face {
        font-family: $font-family;
        font-weight: $weight;
        font-style: $style;

        src: url('#{$file-path}.eot');
        src: url('#{$file-path}.eot?#iefix') format('embedded-opentype'),
        url('#{$file-path}.woff') format('woff'),
        url('#{$file-path}.ttf') format('truetype'),
        url('#{$file-path}.svg##{$font-family}') format('svg');
    }
}

$mobile: 600px;
$mobile-wide: 768px;
$tablet: 870px;
$tablet-wide: 992px;
$desktop: 1024px;
$desktop-wide: 1200px;

@mixin mobile {
    @media (max-width: #{$mobile}) {
        @content;
    }
}

@mixin mobile-wide {
    @media (max-width: #{$mobile-wide}) {
        @content;
    }
}

@mixin tablet {
    @media (max-width: #{$tablet}) {
        @content;
    }
}

@mixin tablet-wide {
    @media (max-width: #{$tablet-wide}) {
        @content;
    }
}

@mixin desktop {
    @media (max-width: #{$desktop}) {
        @content;
    }
}

@mixin desktop-wide {
    @media (max-width: #{$desktop-wide}) {
        @content;
    }
}

@mixin ratio {
    @media
    (-webkit-min-device-pixel-ratio: 1.5),
    (min-resolution: 144dpi) {
        @content;
    }
}

@mixin custom($customWidth) {
    @media (max-width: $customWidth) {
        @content;
    }
}


// Strip units from values
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

// Calculate ems from pixels
@function calc-em($px, $base: 16) {
    $px: strip-unit($px);
    $base: strip-unit($base);
    @if $px == 1 {
        @return 0.0725em;
    }
    @return ($px / $base) * 1em;
}

@mixin center {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    margin-left: auto;
    margin-right: auto;
    margin-top: auto;
    margin-bottom: auto;
}

@mixin counter($var, $sep) {
    counter-reset: list + $var;

  > li:before {
      content: counter(list + $var) $sep;
      counter-increment: list + $var;
  }

}


@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}

@function calcFluidFontSize($f-min, $f-max, $w-min, $w-max, $units: px) {
    $f-min: strip-unit($f-min);
    $f-max: strip-unit($f-max);
    $w-min: strip-unit($w-min);
    $w-max: strip-unit($w-max);

    $k: ($f-max - $f-min)/($w-max - $w-min);
    $b: $f-min - $k * $w-min;

    $b: $b + $units;

    @return calc( #{$k} * 100vw + #{$b} );
}

@mixin fluidFontSize($f-min, $f-max, $w-min, $w-max, $fallback: false) {

    font-size: $f-min;

    @media (min-width: $w-min) {
        @if ($fallback) {
            font-size: $fallback;
        }
        font-size: calcFluidFontSize($f-min, $f-max, $w-min, $w-max, px);
    }
    @media (min-width: $w-max) {
        font-size: $f-max;
    }
}
